<<<<<<< HEAD
name: Deploy to EC2

on:
  push:
    branches: [ main ]  # Só ativa quando você fizer push na branch "main"

jobs:
  deploy:
    runs-on: ubuntu-latest  # Roda em um servidor temporário do GitHub

    steps:
      # Passo 1: Pega o código do repositório
      - name: Checkout code
        uses: actions/checkout@v2

      # Passo 2: Configura a chave SSH para acessar sua EC2
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}  # Chave que você vai configurar depois
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      # Passo 3: Conecta na EC2 e atualiza o código
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no deploy@${{ secrets.EC2_HOST }} <<EOF
            cd /var/www/html/example-app
            git pull origin main    # Puxa as atualizações do GitHub
            # Se for Laravel, descomente as linhas abaixo:
            # composer install --no-dev
            # php artisan migrate --force
          EOF
=======
name: Deploy Laravel para EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Copiar arquivos para EC2 via SSH
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "."
        target: "/var/www/html/example-app"
        overwrite: true

    - name: Rodar comandos na EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /var/www/html/example-app
          composer install --no-interaction --prefer-dist
          php artisan config:cache
          php artisan route:cache
          php artisan view:clear
>>>>>>> c5ee6c9 (Adiciona deploy automático para EC2)
